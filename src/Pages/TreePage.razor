@page "/"

@using AdminShell
@using System
@using System.Net;
@using System.Drawing;

@implements IDisposable

@inject VisualTreeBuilderService _treeBuilder
@inject AASXPackageService _packageService

<div class="col-12 row">
    <br />
    <div class="col-8" style="border-style:solid;border-color:blue;border-radius:8px;word-wrap:break-word;word-break:break-all;position:sticky">

        @UpdateVisibleTree(SelectedNode)

        <TreeNode Nodes="TreeNodes" ChildSelector="@(item => item.Children)" @bind-SelectedNode="SelectedNode" @bind-ExpandedNodes="ExpandedTreeNodes" HasChildNodes="@(item => item.Children?.Any() == true)">
            <TitleTemplate>
                <span style="color:white;background-color:blue;">@ViewNodeType(context)</span>
                @ViewNodeID(context)
                @ViewNodeInfo(context)
            </TitleTemplate>
        </TreeNode>
    </div>
    <div class="col-4" style="border-style:solid;border-color:blue;border-radius:8px;position:sticky">
        <div class="sticky-top" style="word-wrap:break-word;word-break:break-all;">
            @{
                <span style="color:white;background-color:blue;">@ViewNodeType(SelectedNode)</span> @ViewNodeID(SelectedNode)<br>
                for (int line = 0; line < 6; line++)
                {
                    string nodeDetails0 = ViewNodeDetails(SelectedNode, line, 0);
                    string nodeDetails1 = ViewNodeDetails(SelectedNode, line, 1);
                    if (nodeDetails0 != string.Empty && nodeDetails1 != string.Empty)
                    {
                        <span style="color:white;background-color:blue;">@nodeDetails0</span> @nodeDetails1<br>
                    }
                }

                bool externalLink = false;
                string link = GetLink(SelectedNode, out externalLink);
                if (SelectedNode != null && link != string.Empty)
                {
                    <a href="@link" target="_blank">@link</a><br>
                }
                if (SelectedNode != null && SelectedNode.Tag is Property)
                {
                    <input @bind="CurrentValue" /> <span style="color:white;background-color:blue;">@CurrentValue</span><br>
                    @code { private string CurrentValue { get; set; } }
                    if (CurrentValue != null && CurrentValue != string.Empty)
                    {
                        if (SelectedNode.Tag is Property)
                        {
                            (SelectedNode.Tag as Property).Value = CurrentValue;
                            (SelectedNode.Tag as Property).setTimeStamp(DateTime.UtcNow);
                            this.StateHasChanged();
                        }
                        CurrentValue = string.Empty;
                    }
                }
                if (SelectedNode != null && (SelectedNode.Tag is AssetAdministrationShell || SelectedNode.Tag is File))
                {
                    string detailsImage = CreateDetailsImage(SelectedNode);
                    if (detailsImage != string.Empty)
                    {
                        <br />
                        <div>
                            <img src=data:image;base64,@detailsImage style="max-width: 100%;" alt="Details Image" />
                        </div>
                    }
                }
            }
        </div>
    </div>
</div>

@code {

    public class TreeNodeData
    {
        public string Text { get; set; }

        public IEnumerable<TreeNodeData> Children { get; set; }

        public object Parent { get; set; }

        public string Type { get; set; }

        public object Tag { get; set; }

        public string EnvKey { get; set; }
    }

    List<TreeNodeData> TreeNodes = null;

    IList<TreeNodeData> ExpandedTreeNodes = new List<TreeNodeData>();

    TreeNodeData SelectedNode { get; set; }

    protected override void OnInitialized()
    {
        VisualTreeBuilderService.NewDataAvailable += NewData;
    }

    public void Dispose()
    {
        VisualTreeBuilderService.NewDataAvailable -= NewData;
    }

    TreeUpdateMode CurrentTreeUpdateMode = TreeUpdateMode.RebuildAndCollapse;

    private void NewData(object source, EventArgs args)
    {
        if (CurrentTreeUpdateMode == TreeUpdateMode.ValuesOnly)
        {
            CurrentTreeUpdateMode = (TreeUpdateMode) source;
            InvokeAsync(() => this.StateHasChanged());
        }
    }

    List<string> getPath(TreeNodeData i)
    {
        if (i == null)
        {
            return null;
        }

        List<string> upPath = new List<string>();
        upPath.Add(i.Text);
        while (i.Parent != null)
        {
            i = (TreeNodeData)i.Parent;
            upPath.Add(i.Text);
        }

        List<string> downPath = new List<string>();
        int j = upPath.Count - 1;
        while (j >= 0)
        {
            downPath.Add(upPath[j--]);
        }

        return downPath;
    }

    TreeNodeData findPath(List<string> path)
    {
        if (path != null && path.Count > 0)
        {
            TreeNodeData found = null;
            int k = 0;
            while (k < TreeNodes.Count)
            {
                TreeNodeData i = TreeNodes[k];
                if (i.Text != path[0])
                {
                    k++;
                    continue;
                }

                int j = 0;
                found = i;
                while (++j < path.Count)
                {
                    if (i.Children != null)
                    {
                        found = null;
                        foreach (var c in i.Children)
                        {
                            if (c.Text == path[j])
                            {
                                found = c;
                                break;
                            }
                        }
                    }

                    if (found == null)
                    {
                        return null;
                    }

                    i = found;
                }

                if (found != null)
                {
                    return found;
                }
            }
        }

        return null;
    }

    string UpdateVisibleTree(TreeNodeData selectedNode)
    {
        switch (CurrentTreeUpdateMode)
        {
            case TreeUpdateMode.ValuesOnly: break;
            case TreeUpdateMode.Rebuild:
            {
                bool expandedNodesExist = ExpandedTreeNodes.Count != 0;

                // capture existing expanded nodes
                List<string>[] expandedNodesPath = new List<string>[ExpandedTreeNodes.Count + 1];
                if (expandedNodesExist)
                {
                    for (int j = 0; j < ExpandedTreeNodes.Count; j++)
                    {
                        expandedNodesPath[j] = getPath(ExpandedTreeNodes[j]);
                    }
                }

                // rebuild tree
                TreeNodes = _treeBuilder.BuildTree();
                ExpandedTreeNodes.Clear();

                if (selectedNode != null)
                {
                    // make sure the selected node still exists in the new tree
                    selectedNode = findPath(getPath(selectedNode));
                }

                // reassign previously expanded nodes, if they still exist
                if (expandedNodesExist)
                {
                    foreach (List<string> path in expandedNodesPath)
                    {
                        TreeNodeData p = findPath(path);
                        if (p != null)
                        {
                            ExpandedTreeNodes.Add(p);
                        }
                    }
                }

                break;
            }
            case TreeUpdateMode.RebuildAndCollapse:
            {
                TreeNodes = _treeBuilder.BuildTree();
                ExpandedTreeNodes.Clear();
                selectedNode = null;
                break;
            }
        }

        CurrentTreeUpdateMode = TreeUpdateMode.ValuesOnly;
        SelectedNode = selectedNode;
        return string.Empty;
    }

    string CreateDetailsImage(TreeNodeData item)
    {
        if (item == null)
        {
            return string.Empty;
        }

        object o = item.Tag;

        if (o is AssetAdministrationShell)
        {
            var aas = o as AssetAdministrationShell;
            byte[] conents = null;
            try
            {
                conents = _packageService.GetThumbnailFromPackage(item.EnvKey);
            }
            catch { }
            if (conents != null)
            {
                return System.Convert.ToBase64String(conents);
            }
        }

        if (o is File)
        {
            var f = o as File;
            // Test for /aasx/
            string[] split = f.Value.Split(new Char[] { '/' });
            if ((split.Length > 1) && (split[1].ToLower() == "aasx"))
            {
                split = f.Value.Split(new Char[] { '.' });
                switch(split.Last().ToLower())
                {
                    case "jpg":
                    case "bmp":
                    case "png":
                        byte[] contents = _packageService.GetFileContentsFromPackagePart(item.EnvKey, f.Value);
                        if (contents != null)
                        {
                            return System.Convert.ToBase64String(contents);
                        }
                        break;
                }
            }
        }

        return string.Empty;
    }

    string GetLink(TreeNodeData item, out bool external)
    {
        external = false;

        if (item == null)
        {
            return string.Empty;
        }

        object o = item.Tag;
        if (o is AssetAdministrationShell)
        {
            return "/server/getaasx/" + Convert.ToString(SelectedNode.EnvKey);
        }

        if (o is File || o is Property)
        {
            string value = string.Empty;

            if (o is File)
            {
                value = (o as File).Value;
            }

            if (o is Property)
            {
                value = (o as Property).Value;
            }

            string[] split = value.Split(new Char[] { ':' });
            if (split[0].ToLower() == "http" || split[0].ToLower() == "https")
            {
                external = true;
                return value;
            }

            // Test for /aasx/
            split = value.Split(new Char[] { '/' });
            if (split.Length > 1)
            {
                if (split[1].ToLower() == "aasx")
                {
                    return "/server/getfile/" + item.EnvKey.ToString() + value;
                }
            }
        }

        return string.Empty;
    }

    string ViewNodeType(TreeNodeData item)
    {
        if (item == null)
        {
            return string.Empty;
        }

        string ret = string.Empty;

        if (item.Type != null)
        {
            ret = item.Type + " ";
        }

        object o = item.Tag;

        if (o is AssetAdministrationShell)
        {
            ret += "AAS ";
        }
        if (o is Submodel)
        {
            ret += "Sub ";
        }
        if (o is SubmodelElement)
        {
            if (o is SubmodelElementCollection)
            {
                ret += "Coll ";
            }
            if (o is Property)
            {
                ret += "Prop ";
            }
        }
        if (o is Operation)
        {
            ret += "Opr ";
        }
        if (o is File)
        {
            ret += "File ";
        }
        if (o is Blob)
        {
            ret += "Blob ";
        }
        if (o is MultiLanguageProperty)
        {
            ret += "Lang ";
        }
        if (o is RelationshipElement)
        {
            ret += "Rel ";
        }
        if (o is ReferenceElement)
        {
            ret += "Ref ";
        }
        if (o is Entity)
        {
            ret += "Ent ";
        }

        return (ret);
    }

    string ViewNodeID(TreeNodeData item)
    {
        if (item == null)
        {
            return string.Empty;
        }

        string ret = string.Empty;

        object o = item.Tag;

        if (o is AssetAdministrationShell)
        {
            var aas = o as AssetAdministrationShell;
            ret = aas.IdShort + " " + aas.DisplayName;
        }

        if (o is Submodel)
        {
            var sm = o as Submodel;
            ret = string.Empty;
            ret += sm.IdShort + " " + sm.DisplayName;
        }

        if (o is SubmodelElement)
        {
            var sme = o as SubmodelElement;
            ret = string.Empty;
            ret += sme.IdShort + " " + sme.DisplayName;
        }

        if (o is File)
        {
            var f = o as File;
            ret = string.Empty;
            ret += f.IdShort + " " + f.DisplayName;
        }
        if (o is Blob)
        {
            var b = o as Blob;
            ret = string.Empty;
            ret += b.IdShort + " " + b.DisplayName;
        }
        if (o is MultiLanguageProperty)
        {
            var mlp = o as MultiLanguageProperty;
            ret = string.Empty;
            ret += mlp.IdShort + " " + mlp.DisplayName;
        }
        return (ret);
    }

    string ViewNodeInfo(TreeNodeData item)
    {
        if (item == null)
        {
            return string.Empty;
        }

        string ret = string.Empty;

        object o = item.Tag;

        if (o is AssetAdministrationShell)
        {
            var aas = o as AssetAdministrationShell;
        }
        if (o is Submodel)
        {
            var sm = o as Submodel;
        }
        if (o is SubmodelElementCollection)
        {
            var sme = o as SubmodelElementCollection;
            if (sme.Value.Count > 0)
            {
                ret += " #" + sme.Value.Count;
            }
        }
        if (o is SubmodelElement)
        {
            if (o is Property)
            {
                var prop = o as Property;
                if (prop.Value != string.Empty)
                {
                    ret = " = " + prop.Value;
                }
            }
            if (o is File)
            {
                var f = o as File;
                ret = " = " + f.Value;
            }
        }
        if (o is MultiLanguageProperty)
        {
            var mlp = o as MultiLanguageProperty;
            var ls = mlp.Value;
            ret = " = ";
            for (int i = 0; i < ls.Count; i++)
            {
                ret += ls[i].Language + " ";
            }
        }
        return (ret);
    }

    AssetAdministrationShell FindAAS(AssetAdministrationShellEnvironment env, Identifier id)
    {
        if (id == null)
        {
            return null;
        }

        foreach (var aas in env.AssetAdministrationShells)
        {
            if (aas.Identification.Id != null && aas.Identification.Equals(id))
            {
                return aas;
            }
        }

        return null;
    }

    public EntityTypeEnum GetEntityType(Entity e)
    {
        EntityTypeEnum res = EntityTypeEnum.Undefined;

        if (e.EntityType != null && e.EntityType.Trim().ToLower() == EntityTypeEnum.CoManagedEntity.ToString().ToLower())
        {
            res = EntityTypeEnum.CoManagedEntity;
        }

        if (e.EntityType != null && e.EntityType.Trim().ToLower() == EntityTypeEnum.SelfManagedEntity.ToString().ToLower())
        {
            res = EntityTypeEnum.SelfManagedEntity;
        }

        return res;
    }

    string ViewNodeDetails(TreeNodeData item, int line, int col)
    {
        if (item == null)
        {
            return string.Empty;
        }

        string ret = string.Empty;

        object tag = item.Tag;

        if (tag == null)
        {
            return string.Empty;
        }

        if (tag is AssetAdministrationShell)
        {
            ret = string.Empty;
            var aas = tag as AssetAdministrationShell;

            var asset = FindAAS(_packageService.Packages[item.EnvKey], aas.Identification.Id);

            switch (line)
            {
                case 0:
                    ret = "ID ";
                    if (col == 1)
                        ret = aas.Identification.Id + string.Empty;
                    break;
                case 1:
                    if (asset != null)
                    {
                        ret = "ASSET ";
                        if (col == 1)
                            ret = asset.IdShort;
                    }
                    break;
                case 2:
                    if (asset != null)
                    {
                        ret = "ASSETID ";
                        if (col == 1)
                            ret = asset.Identification.Id + string.Empty;
                    }
                    break;
                case 3:
                    if (asset != null)
                    {
                        ret = "ASSETID URLENCODED ";
                        if (col == 1)
                        {
                            string url = WebUtility.UrlEncode(asset.Identification.Id);
                            ret = url;
                        }
                    }
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is Submodel)
        {
            var sm = tag as Submodel;
            switch (line)
            {
                case 0:
                    ret = "ID ";
                    if (col == 1)
                        ret = sm.Identification.Id + string.Empty;
                    break;
                case 1:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = sm.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 2:
                    ret = getQualifiers(sm.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is Property)
        {
            var prop = tag as Property;
            ret += ", " + prop.Value;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = prop.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = "Value Type ";
                    if (col == 1)
                        ret = prop.ValueType + string.Empty;
                    break;
                case 2:
                    ret = "Value ";
                    if (col == 1)
                        ret = prop.Value + string.Empty;
                    break;
                case 3:
                    ret = getQualifiers(prop.Qualifiers, col);
                    break;
                case 4:
                    ret = getUnit(item, prop, col);
                    break;
               default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is Entity)
        {
            var e = tag as Entity;
            ret += ", " + e.EntityType;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = e.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = "Entity Type ";
                    if (col == 1)
                        ret = e.EntityType + string.Empty;
                    break;
                case 2:
                    ret = string.Empty;
                    break;
                case 3:
                    ret = getQualifiers(e.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is File)
        {
            var f = tag as File;
            ret += ", " + f.Value;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = f.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = "Value ";
                    if (col == 1)
                        ret = f.Value;
                    break;
                case 2:
                    ret = getQualifiers(f.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is Blob)
        {
            var b = tag as Blob;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = b.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = "MimeType ";
                    if (col == 1)
                        ret = b.MimeType;
                    break;
                case 2:
                    ret = "Value ";
                    if (col == 1)
                        ret = b.Value;
                    break;
                case 3:
                    ret = getQualifiers(b.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is Operation)
        {
            var op = tag as Operation;
            ret = op.IdShort;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = op.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = "CountInputs ";
                    if (col == 1)
                    {
                        ret = "0";
                        if (op.InputVariables != null)
                        {
                            ret = op.InputVariables.Count + string.Empty;
                        }
                    }
                    break;
                case 2:
                    ret = "CountOutputs ";
                    if (col == 1)
                    {
                        ret = "0";
                        if (op.OutputVariables != null)
                        {
                            ret = op.OutputVariables.Count + string.Empty;
                        }
                    }
                    break;
                case 3:
                    ret = getQualifiers(op.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is RelationshipElement)
        {
            var r = tag as RelationshipElement;
            ret = r.IdShort;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = r.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = "First ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = r.First;
                        if (k != null)
                        {
                            ret = k.Keys.ToString();
                        }
                    }
                    break;
                case 2:
                    ret = "Second ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = r.Second;
                        if (k != null)
                        {
                            ret = k.Keys.ToString();
                        }
                    }
                    break;
                case 3:
                    ret = getQualifiers(r.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is ReferenceElement)
        {
            var r = tag as ReferenceElement;
            ret = r.IdShort;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = r.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = "Value ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                    }
                    break;
                case 2:
                    ret = getQualifiers(r.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is MultiLanguageProperty)
        {
            var mlp = tag as MultiLanguageProperty;
            var ls = mlp.Value;
            for (int i = 0; i < ls.Count; i++)
            {
                ret += ls[i].Language + " ";
            }
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = mlp.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                case 2:
                case 3:
                case 4:
                    ret = string.Empty;
                    if (ls.Count > line - 1)
                    {
                        ret = ls[line - 1].Language;
                        if (col == 1)
                            ret = ls[line - 1].Text + string.Empty;
                    }
                    break;
                case 5:
                    ret = getQualifiers(mlp.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is SubmodelElement)
        {
            var sme = tag as SubmodelElement;
            ret = sme.IdShort + ", " + sme.SemanticId;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = sme.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = getQualifiers(sme.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        return (ret);
    }

    static string getQualifiers(List<Qualifier> q, int col)
    {
        string ret = string.Empty;

        if (q != null && q.Count > 0)
        {
            ret = "Qualifiers ";
            if (col == 1)
            {
                ret = string.Empty;
                for (int i = 0; i < q.Count; i++)
                {
                    if (i != 0)
                        ret += ", ";
                    ret += q[i].Type + " ";
                    if (q[i].Value != string.Empty)
                    {
                        ret += "= " + q[i].Value;
                    }
                }
            }
        }
        return ret;
    }

    public string getUnit(TreeNodeData item, SubmodelElement se, int col)
    {
        string ret = string.Empty;
        if (se.SemanticId == null)
        {
            return ret;
        }

        var cd = FindConceptDescription(_packageService.Packages[item.EnvKey], se.SemanticId.Keys);
        if (cd != null)
        {
            var iec = cd.EmbeddedDataSpecifications?[0].DataSpecificationContent.DataSpecificationIEC61360;
            if (iec != null)
            {
                ret = "Unit ";
                if (col == 1)
                {
                    ret = iec.Unit;
                    if (iec.UnitId != null && iec.UnitId.Keys != null && iec.UnitId.Keys.Count > 0)
                        ret += " (UnitId = " + iec.UnitId.Keys[0].ToString() + ")";
                }
            }
        }

        return ret;
    }

    public ConceptDescription FindConceptDescription(AssetAdministrationShellEnvironment env, List<Key> keys)
    {
        if (keys == null)
        {
            return null;
        }

        // can only refs with 1 key
        if (keys.Count != 1)
        {
            return null;
        }

        var key = keys[0];
        if (key.Type.ToString().ToLower().Trim() != "conceptdescription")
        {
            return null;
        }

        foreach (var cd in env.ConceptDescriptions)
        {
            if (cd.Identification.Value.ToLower().Trim() == key.Value.ToLower().Trim())
            {
                return cd;
            }
        }

        return null;
    }
}
