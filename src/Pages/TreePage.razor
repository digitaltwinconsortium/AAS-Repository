@page "/"

@using AdminShell
@using System
@using System.Net
@using System.Drawing

@inject VisualTreeBuilderService _treeBuilder
@inject AASXPackageService _packageService

<div>
<p>
    For creating OPC UA-based Asset Admin Shells, you can use an OPC UA editor tool, like the one available for downloaded from the Siemens website (you may need to create an account first):<br />
    <a href="https://support.industry.siemens.com/cs/document/109755133/siemens-opc-ua-modeling-editor-(siome)?dti=0&lc=en-US">Siemens OPC UA Modeling Editor (SiOME)</a><br />
    Export the nodeset XML file from the OPC UA editor tool and then import it into this AAS Repository via the <b>Add AAS</b> link above.<br />
</p>
</div>
<hr />
<div class="col-12 row">
    <p />
    <div class="col-1"/>
    <div class="col-6">
        <Tree Nodes="TreeNodes" TNode="TreeNode" ChildSelector="@(node => node.Children)" SelectedNodeChanged="SelectedNodeChanged" OnNodeExpand="OnNodeExpand" HasChildNodes="HasChildNodes">
            <TitleTemplate>
                <span style="color:slategray">@ViewNodeType(context)</span> @ViewNodeInfo(context)
            </TitleTemplate>
        </Tree>
    </div>
    <div class="col-5">
        <p />
        @{
            for (int line = 0; line < 6; line++)
            {
                string nodeDetailsName = ViewNodeDetails(SelectedNode, line, 0);
                string nodeDetailsValue = ViewNodeDetails(SelectedNode, line, 1);
                if (nodeDetailsName != string.Empty && nodeDetailsValue != string.Empty)
                {
                    <span style="color:slategray">@nodeDetailsName</span> @nodeDetailsValue<br />
                }
            }

            if (SelectedNode != null)
            {
                string link = GetLink(SelectedNode);
                if (link != string.Empty)
                {
                    <a href="@link" target="_blank">@link</a><br>
                }

                if (SelectedNode.Tag is AssetAdministrationShell || SelectedNode.Tag is File)
                {
                    string detailsImage = CreateDetailsImage(SelectedNode);
                    if (detailsImage != string.Empty)
                    {
                        <div>
                            <img src=data:image;base64,@detailsImage style="max-width: 100%;" alt="Details Image" />
                        </div>
                    }
                }
            }
        }
    </div>
</div>

@code {

    public class TreeNode
    {
        public string Text { get; set; } = string.Empty;

        public IEnumerable<TreeNode> Children { get; set; } = null;

        public string Type { get; set; } = string.Empty;

        public object Tag { get; set; } = null;

        public string EnvKey { get; set; } = string.Empty;
    }

    List<TreeNode> TreeNodes = null;

    TreeNode SelectedNode { get; set; }

    protected override void OnInitialized()
    {
        TreeNodes = _treeBuilder.CreateViewFromPackages();
    }

    private Task OnNodeExpand(TreeNode node)
    {
        if (node.Children == null)
        {
            if (node.Type == "Package")
            {
                //return CreateViewFromPackageLegacy(node);
                node.Children = _treeBuilder.CreateViewFromPackage(node.EnvKey);
                return Task.CompletedTask;
            }

            if (node.Type == "UANodeSet")
            {
                node.Children = _treeBuilder.CreateViewFromUANodesetFile(node.EnvKey);
                return Task.CompletedTask;
            }

            if (node.Type == "UANode")
            {
                node.Children = _treeBuilder.CreateViewFromUANode(node.EnvKey, node.Tag as NodesetViewerNode);
                return Task.CompletedTask;
            }

            // default is to create an empty list
            node.Children = new List<TreeNode>();
        }

        return Task.CompletedTask;
    }

    private Task CreateViewFromPackageLegacy(TreeNode node)
    {
        if (node.Tag is AssetAdministrationShellEnvironment)
        {
            AssetAdministrationShellEnvironment aasEnv = node.Tag as AssetAdministrationShellEnvironment;
            node.Children = _treeBuilder.CreateViewFromAASEnv(node.EnvKey, aasEnv);
            return Task.CompletedTask;
        }

        if (node.Tag is SubmodelElementCollection)
        {
            SubmodelElementCollection submodelElementCollection = node.Tag as SubmodelElementCollection;
            node.Children = _treeBuilder.CreateViewFromAASSMECollection(node.EnvKey, submodelElementCollection);
            return Task.CompletedTask;
        }

        if (node.Tag is Operation)
        {
            Operation operation = node.Tag as Operation;
            node.Children = _treeBuilder.CreateViewFromAASOperation(node.EnvKey, operation);
            return Task.CompletedTask;
        }

        if (node.Tag is Entity)
        {
            Entity entity = node.Tag as Entity;
            node.Children = _treeBuilder.CreateViewFromAASEntity(node.EnvKey, entity);
            return Task.CompletedTask;
        }

        if (node.Tag is Submodel)
        {
            Submodel submodel = node.Tag as Submodel;
            node.Children = _treeBuilder.CreateViewFromAASSubModel(node.EnvKey, submodel);
            return Task.CompletedTask;
        }

        if (node.Tag is SubmodelElementWrapper)
        {
            SubmodelElementWrapper smew = node.Tag as SubmodelElementWrapper;

            if (smew.SubmodelElement.IdShort == "NODESET2_XML" && Uri.IsWellFormedUriString(((File)smew.SubmodelElement).Value, UriKind.Absolute))
            {
                node.Children = _treeBuilder.CreateViewFromUACloudLibNodeset(node.EnvKey, new Uri(((File)smew.SubmodelElement).Value));
                return Task.CompletedTask;
            }

            if (smew.SubmodelElement.IdShort == "CAEX")
            {
                node.Children = _treeBuilder.CreateViewFromAMLCAEXFile(node.EnvKey, ((File)smew.SubmodelElement).Value);
                return Task.CompletedTask;
            }
        }

        return Task.CompletedTask;
    }

    private void SelectedNodeChanged(TreeNode node)
    {
        SelectedNode = node;
    }

    private bool HasChildNodes(TreeNode node)
    {
        if (node.Children == null)
        {
            // initially we want to show the plus sign so we can expand the node
            return true;
        }

        if (node.Children.Count() == 0)
        {
            return false;
        }

        return true;
    }

    private string CreateDetailsImage(TreeNode item)
    {
        if (item == null)
        {
            return string.Empty;
        }

        object o = item.Tag;

        if (o is AssetAdministrationShell)
        {
            var aas = o as AssetAdministrationShell;
            byte[] contents = null;
            try
            {
                contents = _packageService.GetThumbnailFromPackage(item.EnvKey, out string filename);
            }
            catch { }
            if (contents != null)
            {
                return System.Convert.ToBase64String(contents);
            }
        }

        if (o is File)
        {
            var f = o as File;
            // Test for /aasx/
            string[] split = f.Value.Split(new Char[] { '/' });
            if ((split.Length > 1) && (split[1].ToLower() == "aasx"))
            {
                split = f.Value.Split(new Char[] { '.' });
                switch(split.Last().ToLower())
                {
                    case "jpg":
                    case "bmp":
                    case "png":
                        byte[] contents = _packageService.GetFileContentsFromPackagePart(item.EnvKey, f.Value);
                        if (contents != null)
                        {
                            return System.Convert.ToBase64String(contents);
                        }
                        break;
                }
            }
        }

        return string.Empty;
    }

    private string GetLink(TreeNode item)
    {
        if (item == null)
        {
            return string.Empty;
        }

        if (item.Tag is AssetAdministrationShell)
        {
            return "/server/getaasx/" + Convert.ToString(SelectedNode.EnvKey);
        }

        if (item.Tag is File || item.Tag is Property)
        {
            string value = string.Empty;

            if (item.Tag is File)
            {
                value = (item.Tag as File).Value;
            }

            if (item.Tag is Property)
            {
                value = (item.Tag as Property).Value;
            }

            string[] split = value.Split(new Char[] { ':' });
            if (split[0].ToLower() == "http" || split[0].ToLower() == "https")
            {
                return value;
            }

            // Test for /aasx/
            split = value.Split(new Char[] { '/' });
            if (split.Length > 1)
            {
                if (split[1].ToLower() == "aasx")
                {
                    return "/server/getfile/" + item.EnvKey.ToString() + value;
                }
            }
        }

        return string.Empty;
    }

    private string ViewNodeType(TreeNode item)
    {
        if (item == null)
        {
            return string.Empty;
        }
        else
        {
            return item.Type;
        }
    }

    private string ViewNodeInfo(TreeNode item)
    {
        if (item == null)
        {
            return string.Empty;
        }

        string info = item.Text;

        if (item.Tag is SubmodelElementCollection)
        {
            var sme = item.Tag as SubmodelElementCollection;
            if (sme.Value.Count > 0)
            {
                info += " #" + sme.Value.Count;
            }
        }

        if (item.Tag is SubmodelElement)
        {
            if (item.Tag is Property)
            {
                var prop = item.Tag as Property;
                if (prop.Value != string.Empty)
                {
                    info += " = " + prop.Value;
                }
            }
            if (item.Tag is File)
            {
                var f = item.Tag as File;
                info += " = " + f.Value;
            }
        }

        if (item.Tag is MultiLanguageProperty)
        {
            info += " = ";
            var mlp = item.Tag as MultiLanguageProperty;
            var ls = mlp.Value;
            for (int i = 0; i < ls.Count; i++)
            {
                info += ls[i].Language + " ";
            }
        }

        return info;
    }

    private AssetAdministrationShell FindAAS(AssetAdministrationShellEnvironment env, string idShort)
    {
        if (string.IsNullOrEmpty(idShort))
        {
            return null;
        }

        foreach (var aas in env.AssetAdministrationShells)
        {
            if (aas.IdShort == idShort)
            {
                return aas;
            }
        }

        return null;
    }

    private string ViewNodeDetails(TreeNode item, int line, int col)
    {
        string ret = string.Empty;

        if (item == null)
        {
            return ret;
        }

        object tag = item.Tag;
        if (tag == null)
        {
            return ret;
        }

        if (tag is AssetAdministrationShell)
        {
            ret = string.Empty;
            var aas = tag as AssetAdministrationShell;

            var asset = FindAAS(_packageService.Packages[item.EnvKey], aas.IdShort);
            if (asset == null)
            {
                return ret;
            }

            switch (line)
            {
                case 0:
                    ret = "ID ";
                    if (col == 1)
                    {
                        ret = aas.Identification.Id;
                    }
                    break;
                case 1:
                    ret = "ASSET ";
                    if (col == 1)
                    {
                        ret = asset.IdShort;
                    }
                break;
                case 2:
                    ret = "ASSETID ";
                    if (col == 1)
                    {
                        ret = asset.Identification.Id;
                    }
                    break;
                case 3:
                    ret = "ASSETID URLENCODED ";
                    if (col == 1)
                    {
                        ret = WebUtility.UrlEncode(asset.Identification.Id);
                    }
                    break;
                default:
                    ret = string.Empty;
                    break;
            }

            return ret;
        }

        if (tag is Submodel)
        {
            var sm = tag as Submodel;
            switch (line)
            {
                case 0:
                    ret = "ID ";
                    if (col == 1)
                    {
                        ret = sm.Identification.Id;
                    }
                    break;
                case 1:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = sm.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 2:
                    ret = getQualifiers(sm.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is Property)
        {
            var prop = tag as Property;
            ret += ", " + prop.Value;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = prop.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = "Value Type ";
                    if (col == 1)
                    {
                        ret = prop.ValueType;
                    }
                    break;
                case 2:
                    ret = "Value ";
                    if (col == 1)
                    {
                        ret = prop.Value;
                    }
                    break;
                case 3:
                    ret = getQualifiers(prop.Qualifiers, col);
                    break;
                case 4:
                    ret = getUnit(item, prop, col);
                    break;
               default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is Entity)
        {
            var e = tag as Entity;
            ret += ", " + e.EntityType;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = e.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = "Entity Type ";
                    if (col == 1)
                    {
                        ret = e.EntityType;
                    }
                    break;
                case 2:
                    ret = string.Empty;
                    break;
                case 3:
                    ret = getQualifiers(e.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is File)
        {
            var f = tag as File;
            ret += ", " + f.Value;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = f.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = "Value ";
                    if (col == 1)
                    {
                        ret = f.Value;
                    }
                    break;
                case 2:
                    ret = getQualifiers(f.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is Blob)
        {
            var b = tag as Blob;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = b.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = "MimeType ";
                    if (col == 1)
                    {
                        ret = b.MimeType;
                    }
                    break;
                case 2:
                    ret = "Value ";
                    if (col == 1)
                    {
                        ret = b.Value;
                    }
                    break;
                case 3:
                    ret = getQualifiers(b.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is Operation)
        {
            var op = tag as Operation;
            ret = op.IdShort;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = op.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = "CountInputs ";
                    if (col == 1)
                    {
                        ret = "0";
                        if (op.InputVariables != null)
                        {
                            ret = op.InputVariables.Count.ToString();
                        }
                    }
                    break;
                case 2:
                    ret = "CountOutputs ";
                    if (col == 1)
                    {
                        ret = "0";
                        if (op.OutputVariables != null)
                        {
                            ret = op.OutputVariables.Count.ToString();
                        }
                    }
                    break;
                case 3:
                    ret = getQualifiers(op.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is RelationshipElement)
        {
            var r = tag as RelationshipElement;
            ret = r.IdShort;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = r.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = "First ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = r.First;
                        if (k != null)
                        {
                            ret = k.Keys.ToString();
                        }
                    }
                    break;
                case 2:
                    ret = "Second ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = r.Second;
                        if (k != null)
                        {
                            ret = k.Keys.ToString();
                        }
                    }
                    break;
                case 3:
                    ret = getQualifiers(r.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is ReferenceElement)
        {
            var r = tag as ReferenceElement;
            ret = r.IdShort;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = r.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = "Value ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                    }
                    break;
                case 2:
                    ret = getQualifiers(r.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is MultiLanguageProperty)
        {
            var mlp = tag as MultiLanguageProperty;
            var ls = mlp.Value;
            for (int i = 0; i < ls.Count; i++)
            {
                ret += ls[i].Language + " ";
            }
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = mlp.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                case 2:
                case 3:
                case 4:
                    ret = string.Empty;
                    if (ls.Count > line - 1)
                    {
                        ret = ls[line - 1].Language;
                        if (col == 1)
                        {
                            ret = ls[line - 1].Text;
                        }
                    }
                    break;
                case 5:
                    ret = getQualifiers(mlp.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        if (tag is SubmodelElement)
        {
            var sme = tag as SubmodelElement;
            ret = sme.IdShort + ", " + sme.SemanticId;
            switch (line)
            {
                case 0:
                    ret = "Semantic ID ";
                    if (col == 1)
                    {
                        ret = string.Empty;
                        var k = sme.SemanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = getQualifiers(sme.Qualifiers, col);
                    break;
                default:
                    ret = string.Empty;
                    break;
            }
            return ret;
        }

        return (ret);
    }

    private string getQualifiers(List<Qualifier> q, int col)
    {
        string ret = string.Empty;

        if (q != null && q.Count > 0)
        {
            ret = "Qualifiers ";
            if (col == 1)
            {
                ret = string.Empty;
                for (int i = 0; i < q.Count; i++)
                {
                    if (i != 0)
                    {
                        ret += ", ";
                    }

                    ret += q[i].Type + " ";
                    if (q[i].Value != string.Empty)
                    {
                        ret += "= " + q[i].Value;
                    }
                }
            }
        }
        return ret;
    }

    private string getUnit(TreeNode item, SubmodelElement se, int col)
    {
        string ret = string.Empty;
        if (se.SemanticId == null)
        {
            return ret;
        }

        var cd = FindConceptDescription(_packageService.Packages[item.EnvKey], se.SemanticId.Keys);
        if (cd != null)
        {
            var iec = cd.EmbeddedDataSpecifications?[0].DataSpecificationContent.DataSpecificationIEC61360;
            if (iec != null)
            {
                ret = "Unit ";
                if (col == 1)
                {
                    ret = iec.Unit;
                    if (iec.UnitId != null && iec.UnitId.Keys != null && iec.UnitId.Keys.Count > 0)
                    {
                        ret += " (UnitId = " + iec.UnitId.Keys[0].ToString() + ")";
                    }
                }
            }
        }

        return ret;
    }

    private ConceptDescription FindConceptDescription(AssetAdministrationShellEnvironment env, List<Key> keys)
    {
        if (keys == null)
        {
            return null;
        }

        // can only refs with 1 key
        if (keys.Count != 1)
        {
            return null;
        }

        var key = keys[0];
        if (key.Type.ToString().ToLower().Trim() != "conceptdescription")
        {
            return null;
        }

        foreach (var cd in env.ConceptDescriptions)
        {
            if (cd.Identification.Value.ToLower().Trim() == key.Value.ToLower().Trim())
            {
                return cd;
            }
        }

        return null;
    }
}
